[project]
name = "mirage-bench"
version = "0.0.1"
description = "A RAG-based benchmark for multilingual question answering."
license = { file = "LICENSE" }
readme = "README.md"
authors = [
    { name = "Nandan Thakur", email = "nandant@gmail.com" },
    { name = "Suleman Kazi", email = "suleman@vectara.com" },
    { name = "Amin Ahmad", email = "amin@vectara.com" },
]
requires-python = ">=3.10"
keywords = [
    "RAG",
    "multilingual",
    "question answering",
    "benchmark",
    "deep learning",
]
classifiers = [
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "openai",
    "vllm",
    "transformers",
    "datasets",
    "stanza",
    "sentencex",
    "lingua-language-detector",
    "FlagEmbedding",
    "anthropic",
    "google-generativeai",
    "cohere",
    "choix",
    "sklearn",
]

[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project.urls]
Homepage = "https://github.com/vectara/mirage-bench"

[tool.setuptools.packages.find]
include = ["mirage_bench*"]
namespaces = false

[tool.ruff]
line-length = 119
fix = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint]
select = ["E", "F", "W", "I", "UP"]
# Skip `E731` (do not assign a lambda expression, use a def)
ignore = [
    # LineTooLong
    "E501",
    # DoNotAssignLambda
    "E731"
]

[tool.ruff.lint.per-file-ignores]
"examples/**" = [
    # Ignore `E402` (import violations) in all examples
    "E402", 
    # Ignore missing required imports
    "I002"
    ]

[tool.ruff.lint.isort]
known-third-party = ["datasets"]
required-imports = ["from __future__ import annotations"]